Aufgabe 02092025

# AUFGABEN UM SQL BEGRIFFE

In dieser Übung lernst du die wichtigsten Begriffe rund um SQL kennen.

## Such dir die Definitionen und Bedeutungen zu den folgenden Begriffen:

1. **Datenbank**

    Ist eine strukturierte Sammlung von Daten, 
    die elektronisch gespeichert und verwaltet werden.

2. **SQL**

    Structured Query Language – ist eine standardisierte Sprache 
                                zur Verwaltung und Abfrage 
                                von relationalen Datenbanken.


3. **NoSQL**

    Sind Datenbanksysteme, 
    die nicht (nur) auf dem relationalen Modell basieren, 
    sondern z.B. dokumenten-, key-value-, graph- oder spaltenorientiert sind.


4. **Was ist der Hauptunterschied zwischen SQL und NoSQL?**

    SQL-Datenbanken sind relational und nutzen Tabellen mit festen Schemata. 
    
    NoSQL-Datenbanken sind oft schemalos und für große, 
    flexible Datenmengen optimiert.


5. **Abfrage (Query)**

    Ein Befehl, 
    mit dem Daten aus einer Datenbank gelesen, 
    geändert oder gelöscht werden.


6. **ERD (Entity-Relationship-Diagramm)**

   - Was ist ein ERD?

     Ein Diagramm, 
     das die Beziehungen zwischen Datenbankobjekten (Tabellen/Entitäten) 
     grafisch darstellt.
    

   - Wie sieht ein ERD aus?

     Es zeigt Kästchen (Entitäten) 
     und Linien (Beziehungen) zwischen ihnen.
    

   - Wozu wird ein ERD verwendet?

     Zur Planung und Visualisierung der Datenbankstruktur.
    

7. **Flowcharts**


   - Was ist ein Flowchart?

     Ein Diagramm, das Abläufe und Prozesse grafisch darstellt.
    
   - Wie sieht ein Flowchart aus?

     Es besteht aus Symbolen (z.B. Rechtecke, Rauten) und Pfeilen, 
     die den Ablauf zeigen.    

   - Wozu wird ein Flowchart verwendet?

     Zur Visualisierung von Prozessen, Algorithmen oder Workflows.


8. **RDBMS (Relational Database Management System)**

    Es ist ein System zur Verwaltung relationaler Datenbanken, 
    wie z.B. 
    
    - MySQL, 
    - PostgreSQL, 
    - Oracle.


9. Was ist den unterschied zwischen einem RDBMS und ein DBMS? 
   Kanst du Beispiele nennen?


    RDBMS ist speziell für relationale Datenbanken.  

        Bsp.:   - RDBMS: MySQL, PostgreSQL

    DBMS ist ein allgemeines Datenbankverwaltungssystem (z.B. auch für NoSQL). 
    
        Bsp.:   - DBMS: MongoDB, Redis  



10. **PostgreSQL** 
    "Postgres Structured Query Language"

    Ist ein 
    
    leistungsfähiges, 
    freies, 
    objektrelationales 
    
    Datenbankmanagementsystem.



11. **psql**

    Das Kommandozeilen-Tool 
    zur Verwaltung und Abfrage 
    von PostgreSQL-Datenbanken.


## SQL-Befehle

11. **SELECT**

    Wählt Daten aus einer Tabelle aus.


12. **INSERT**

    Fügt neue Daten in eine Tabelle ein.


13. **FROM**

    Gibt die Tabelle an, 
    aus der Daten ausgewählt werden.

14. **WHERE**

    Filtert die Daten nach bestimmten Bedingungen.


15. Was ist ein **Primärschlüssel (Primary Key)**?
dci-student@Lenovo-V15-G4-IRU:~/Selbststudium$ git init
hint: Using 'master' as the name for the initial branch. This default branch name
hint: is subject to change. To configure the initial branch name to use in all
hint: of your new repositories, which will suppress this warning, call:
hint: 
hint:   git config --global init.defaultBranch <name>
hint: 
hint: Names commonly chosen instead of 'master' are 'main', 'trunk' and
hint: 'development'. The just-created branch can be renamed via this command:
hint: 
hint:   git branch -m <name>
Initialized empty Git repository in /home/dci-student/Selbststudium/.git/
dci-student@Lenov# Aufgabe 1

Diese Übung dient dazu, grundlegende SQL-Abfragen zu üben.

Deine Aufgabe ist es, eine Tabelle für die Speicherung von Daten über Bücher vorzubereiten und einige Daten einzufügen. Zeichne deine Abfragen und Antworten in der Datei `task-1-books.sql` auf. Folge den unten aufgeführten Schritten:

## Schritt 1

Erstelle eine Tabelle mit dem Namen `books` mit den folgenden Spalten:

- `id` - SERIAL
- `title` - TEXT
- `author` - TEXT
- `publication_year` - INTEGER

## Schritt 2

Füge das folgende Buch in die Tabelle `books` ein:

- https://en.wikipedia.org/wiki/A_Beautifully_Foolish_Endeavor

## Schritt 3

Füge die folgenden Bücher mit einer Abfrage in die Tabelle `books` ein:

- https://en.wikipedia.org/wiki/An_Absolutely_Remarkable_Thing
- https://en.wikipedia.org/wiki/The_Anthropocene_Reviewed#Book
- https://en.wikipedia.org/wiki/Turtles_All_the_Way_Down_(novel)
- https://en.wikipedia.org/wiki/Everything_Is_Tuberculosis

## Schritt 4

Wähle alle Daten von allen Büchern in der Tabelle `books` aus.

## Schritt 5

Wähle alle Titel und Autoren von allen Büchern in der Tabelle `books` aus.

# Aufgabe 2# Aufgabe 1

Diese Übung dient dazu, grundlegende SQL-Abfragen zu üben.

Deine Aufgabe ist es, eine Tabelle für die Speicherung von Daten über Bücher vorzubereiten und einige Daten einzufügen. Zeichne deine Abfragen und Antworten in der Datei `task-1-books.sql` auf. Folge den unten aufgeführten Schritten:

## Schritt 1

Erstelle eine Tabelle mit dem Namen `books` mit den folgenden Spalten:

- `id` - SERIAL
- `title` - TEXT
- `author` - TEXT
- `publication_year` - INTEGER

## Schritt 2

Füge das folgende Buch in die Tabelle `books` ein:

- https://en.wikipedia.org/wiki/A_Beautifully_Foolish_Endeavor

## Schritt 3

Füge die folgenden Bücher mit einer Abfrage in die Tabelle `books` ein:

- https://en.wikipedia.org/wiki/An_Absolutely_Remarkable_Thing
- https://en.wikipedia.org/wiki/The_Anthropocene_Reviewed#Book
- https://en.wikipedia.org/wiki/Turtles_All_the_Way_Down_(novel)
- https://en.wikipedia.org/wiki/Everything_Is_Tuberculosis

## Schritt 4

Wähle alle Daten von allen Büchern in der Tabelle `books` aus.

## Schritt 5

Wähle alle Titel und Autoren von allen Büchern in der Tabelle `books` aus.

# Aufgabe 2

Diese Übung dient dazu, theoretisches Wissen zu üben.

## Fragen

- Frage 1: Wofür steht SQL?

- Frage 2: Was macht der Datentyp `SERIAL` in PostgreSQL?

- Frage 3: Liste 6 verschiedene Datentypen auf, die in PostgreSQL verfügbar sind.

- Frage 4: Welche Tabellennamen sind für eine PostgreSQL-Tabelle erlaubt? Was ist nicht erlaubt?

- Frage 5: Was ist falsch mit dem Folgenden: `INSERT pets (name, species, birth year) VALUE 'Veera', 2005`?

- Frage 6: Recherchiere einige Unterschiede zwischen MySQL und PostgreSQL. Liste drei Unterschiede auf. Es ist okay, wenn du nicht alles verstehst, was du liest, gib einfach dein Bestes.

- Frage 7: Liste 5 verschiedene NoSQL-Datenbanken auf.

Diese Übung dient dazu, theoretisches Wissen zu üben.

## Fragen

- Frage 1: Wofür steht SQL?

- Frage 2: Was macht der Datentyp `SERIAL` in PostgreSQL?

- Frage 3: Liste 6 verschiedene Datentypen auf, die in PostgreSQL verfügbar sind.

- Frage 4: Welche Tabellennamen sind für eine PostgreSQL-Tabelle erlaubt? Was ist nicht erlaubt?

- Frage 5: Was ist falsch mit dem Folgenden: `INSERT pets (name, species, birth year) VALUE 'Veera', 2005`?

- Frage 6: Recherchiere einige Unterschiede zwischen MySQL und PostgreSQL. Liste drei Unterschiede auf. Es ist okay, wenn du nicht alles verstehst, was du liest, gib einfach dein Bestes.

- Frage 7: Liste 5 verschiedene NoSQL-Datenbanken auf.o-V15-G4-IRU:~/Selbststudium$ git add README.de
fatal: pathspec 'README.de' did not match any files
    Eine Spalte (oder mehrere), 
    die jeden Datensatz eindeutig identifiziert.


## SQL-Befehle zum Verändern der Datenbankstruktur

16. **CREATE TABLE** - Was macht dieser Befehl?

    Erstellt eine neue Tabelle in der Datenbank.


17. **ALTER TABLE** - Was macht dieser Befehl?

    Ändert die Struktur einer bestehenden Tabelle (z.B. Spalten hinzufügen).



18. **DROP TABLE** - Was macht dieser Befehl?

    Löscht eine Tabelle und alle darin enthaltenen Daten.



19. Wie kann ich eine Tabelle mit SQL erstellen mit den Spalten:
    
    - id (Integer, Primärschlüssel)
    
    - titel (Text)
    
    - author (Text)
    
    - jahr (Integer)

    ```sql
        CREATE TABLE buecher (
        id INTEGER PRIMARY KEY,
        titel TEXT,
        author TEXT,
        jahr INTEGER
        );
```


20. Wie kann ich eine Spalte zu einer bestehenden Tabelle hinzufügen?

```sql
        ALTER TABLE buecher ADD COLUMN genre TEXT;
```

    
21. Wie kann ich mehrere Spalten zu einer bestehenden Tabelle hinzufügen?

```sql
        ALTER TABLE buecher
        ADD COLUMN verlag TEXT,
        ADD COLUMN preis NUMERIC;
```
(Bei manchen Systemen muss jede Spalte einzeln hinzugefügt werden.)


22. Wie kann ich alle Daten aus einer Tabelle anzeigen lassen?

```sql
        SELECT * FROM buecher;
```

23. Wie kann ich bestimmte Daten aus einer Tabelle anzeigen lassen z.B. nur die Titel und Autoren?

```sql
        SELECT titel, author FROM buecher;
```


## Selbststudium Ressourcen:

- [W3Schools SQL Tutorial](https://www.w3schools.com/sql/)

- [SQL Playground](https://pg-sql.com/)

- [PostgreSQL Tutorial](https://neon.com/postgresql/postgresql-getting-started)

- [ERD mit draw.io](
    
)

# SQL BEGRIFFE ERKLÄRT

## Such dir die Definitionen und Bedeutungen zu den folgenden Begriffen:

1. **Datenbank**

   - Was ist eine Datenbank?
   - Ein Ort, wo man Daten speichert (sammelt).

   - ist eine strukturierte Datenbank zb in tabellenform

   - strukturierte Sammlungen von Daten in einem Speicherort

   - Wozu wird eine Datenbank verwendet?
     - Statische Webseiten brauchen keine Datenbanken.
     - Dynamische Webseiten brauchen Datenbanken.

2. **SQL**
   - Structured Query Language
3. **NoSQL**
   - Nicht nur SQL (englisch: Not Only SQL)
4. **Was ist der Hauptunterschied zwischen SQL und NoSQL?**
   - SQL-Datenbanken verwenden Tabellen, NoSQL-Datenbanken verwenden Dokumente, Graph
5. ## **Abfrage (Query)**

   - Eine Anweisung, mit der Daten gefiltert, eingefügt,
     verändert oder gelöscht werden.
   - CRUD Operationen durchgeführt werden
     - (Create, Read, Update, Delete)
     - Create - Daten erstellen (Daten einfügen) - POST
     - Read - Daten lesen (Daten anzeigen) - GET
     - Update - Daten verändern (Daten aktualisieren) - PUT/
       PATCH
     - Delete - Daten löschen - DELETE

6. **ERD (Entity-Relationship-Diagramm)**

   - Was ist ein ERD?
     - Ein Diagramm, das zeigt, wie Tabellen und ihre
       Beziehungen in einer Datenbank aussehen
   - Wie sieht ein ERD aus?
     - mehrere kästchen in denen die Datenbanktabellen
       dargestellt werden
     - mit Linien verbunden, welche die beziehungen zwischen
       den Tabellen darstellen
   - Wozu wird ein ERD verwendet?
     - Zur Planung und Visualisierung von Datenbanken

7. **Flowcharts**

   - Was ist ein Flowchart?
     - Ein Diagramm, das den Ablauf eines Prozesses oder
       Systems darstellt z.B. wie eine "if" Abfrage
       funktioniert
   - Wie sieht ein Flowchart aus? [Bilder auf Google suchen](https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Fmiro.medium.com%2Fv2%2Fresize%3Afit%3A1200%2F1*y7Um00K9CVNAKj6t-s63IQ.jpeg&f=1&nofb=1&ipt=c1ab30ca7a5df050337c4c853876ad5bfaceb69946c180d487798f1c5ac4d77f)
   - Wozu wird ein Flowchart verwendet?
     - Zur Planung und Visualisierung von Prozessen und Abläufen

8. **RDBMS (Relational Database Management System)**
9. Was ist den unterschied zwischen einem RDBMS und ein DBMS? Kanst du Beispiele nennen?

# LIVE CODING SQL - Einführung

Diese Übung dient dazu, grundlegende SQL-Abfragen zu üben.

Deine Aufgabe ist es, eine Tabelle für die Speicherung von Daten über Benutzer vorzubereiten und einige Daten einzufügen. Zeichne deine Abfragen und Antworten in der Datei `task-1-users.sql` auf. Folge den unten aufgeführten Schritten:

## Schritt 1

Erstelle eine Tabelle mit dem Namen `users` mit den folgenden Spalten:

- `id` - SERIAL
- `name` - TEXT
- `email` - TEXT
- `age` - INTEGER

```
CREATE TABLE users (
  id SERIAL PRIMARY KEY,
  name VARCHAR(255) NOT NULL,
  email VARCHAR(255) NOT NULL,
  age INTEGER NOT NULL
  );
```

- CSV - Daten im Tabellenformat, durch Kommas getrennt (Comma-Separated Values)

## Schritt 2

Füge den folgenden Benutzer in die Tabelle `users` ein:

- Name: John Doe
- E-Mail: john.doe@example.com
- Alter: 30

```
  INSERT INTO users(name,email, age) VALUES ('John Doe', 'john.doe@example.com', 30)
```

## Schritt 3

Füge die folgenden Benutzer mit einer Abfrage in die Tabelle `users` ein:

- Name: Jane Smith, E-Mail: jane.smith@example.com, Alter: 25
- Name: Alice Johnson, E-Mail: alice.johnson@example.com, Alter: 28
- Name: Bob Brown, E-Mail: bob.brown@example.com, Alter: 35

```
INSERT INTO users(name,email,age) VALUES( 'Jane Smith', 'jane.smith@example.com', 25),
('Alice Johnson', 'alice.johnson@example.com', 28),
( 'Bob Brown', 'bob.brown@example.com', 35);
```

## Schritt 4

Wähle alle Daten von allen Benutzern in der Tabelle `users` aus.

```
SELECT * FROM users;
```

## Schritt 5

Wähle alle Namen und E-Mail-Adressen von allen Benutzern in der Tabelle `users` aus.

```
SELECT name, email FROM users;
```


Aufgabe 03092025

# Aufgabe 1

Diese Übung dient dazu, grundlegende SQL-Abfragen zu üben.

Deine Aufgabe ist es, eine Tabelle für die Speicherung von Daten über Bücher vorzubereiten und einige Daten einzufügen. Zeichne deine Abfragen und Antworten in der Datei `task-1-books.sql` auf. Folge den unten aufgeführten Schritten:

## Schritt 1

Erstelle eine Tabelle mit dem Namen `books` mit den folgenden Spalten:

CREATE TABLE books (
    id - SERIAL PRIMARY KEY,
    title - TEXT,
    author - TEXT,
    publication_year - INTEGER
);

## Schritt 2

Füge das folgende Buch in die Tabelle `books` ein:

INSERT INTO books (title, author, publication_year)
VALUES ('A Beautifully Foolish Endeavor', 'Hank Green', 2020);

## Schritt 3

Füge die folgenden Bücher mit einer Abfrage in die Tabelle `books` ein:

INSERT INTO books (title, author, publication_year) VALUES
('An Absolutely Remarkable Thing', 'Hank Green', 2018),
('The Anthropocene Reviewed', 'John Green', 2021),
('Turtles All the Way Down', 'John Green', 2017),
('Everything Is Tuberculosis', 'Unbekannt', NULL);

## Schritt 4

Wähle alle Daten von allen Büchern in der Tabelle `books` aus.

SELECT * FROM books;

## Schritt 5

Wähle alle Titel und Autoren von allen Büchern in der Tabelle `books` aus.

SELECT title, author FROM books;

# Aufgabe 2

Diese Übung dient dazu, theoretisches Wissen zu üben.

## Fragen

- Frage 1: Wofür steht SQL?

    - Structure Querrly Language

- Frage 2: Was macht der Datentyp `SERIAL` in PostgreSQL?

    - Serial wird oft für Primärschlüssel verwendet und erstellt eine fortlaufende Ganzzahl

- Frage 3: Liste 6 verschiedene Datentypen auf, die in PostgreSQL verfügbar sind.

    - INTEGER
    - TEXT
    - BOOLEAN
    - Datei
    - NUMERIC
    - VARCHAR


- Frage 4: Welche Tabellennamen sind für eine PostgreSQL-Tabelle erlaubt? Was ist nicht erlaubt?

    Erlaubt:        - Buchstaben
                    - Zahlen
                    - Unterstriche
                    - Beginn ohne Zahlen

    nicht Erlaub:   - Leerzeichen
                    - Sonderzeichen
                    - reservierte Wörter

- Frage 5: Was ist falsch mit dem Folgenden: `INSERT pets (name, species, birth year) VALUE 'Veera', 2005`?

    - es muss VALUES heißen
    - die Syntax wird korrekt so geschrieben:
        INSERT INTO pets (name, species, birth_year) VALUES ('Veera', 'Hund', 2005);

- Frage 6: Recherchiere einige Unterschiede zwischen MySQL und PostgreSQL. Liste drei Unterschiede auf. Es ist okay, wenn du nicht alles verstehst, was du liest, gib einfach dein Bestes.

    - MySQL gehört zu Oracle
    - PostgreSQL unterstützt fortgeschrittene Features wie Window Functions und Common Table Expressions
    - ... ist strenger bei SQL-standardisierte

- Frage 7: Liste 5 verschiedene NoSQL-Datenbanken auf.

    - MongoDB
    - Cassandra
    - Redis
    - CouchDB
    - Neo4j



Für weitere Infos siehe die verlinkten Ressourcen!


Aufgabe bis Mo 08092025

# Arbeiten mit einer SQL Datei

## Aufgaben bis Montag

- Erstelle eine neue Ordner in deinem Computer namens `sql-products`
- Starte Postgres und erstelle eine neue Datenbank namens `products`

### Erstelle eine neue SQL Datei namens `products.sql` in dem Ordner `sql-products`

- In dieser Datei, schreibe den SQL Befehl um eine Tabelle namens `products` mit den folgenden Spalten zu erstellen:

```sql
CREATE TABLE products (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    type VARCHAR(50) NOT NULL,
    brand VARCHAR(255),
    model VARCHAR(255),
    year INTEGER,
    price_per_day DECIMAL(10, 2) NOT NULL,
    available BOOLEAN DEFAULT TRUE
);
```

- führe die Datei `products.sql` in deiner `test` Datenbank aus wie z.B. mit dem Befehl:

```bash
psql -U postgres -h localhost -d test -f products.sql
```

### `inserts.sql` datei erstellen mit javascript erstellen

- füge die von Lehrer bereitgestellten `ceate-inserts.js` datei in den `sql-products` ordner
- intialisiere ein neues npm projekt mit `npm init -y`
- in den `package.json` datei, füge `"type": "module",` hinzu. Sollte ungefähr so aussehen:

```json
{
  "name": "02-sql-datenbank",
  "version": "1.0.0",
  "main": "create-inserts.js",
  "type": "module",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "",
  "license": "ISC"
}
```

### Starte die Datei `create-inserts.js` mit Node.js

```bash
node create-inserts.js
```

- Was siehst du in deinem Ordner?

INSERT INTO products (name, type, brand, model, year, price_per_day, available) VALUES
('Mountain Bike', 'Fahrrad', 'Cube', 'Aim Pro', 2022, 15.00, TRUE),
('E-Bike', 'Fahrrad', 'Haibike', 'Sduro', 2021, 25.00, TRUE),
('Road Bike', 'Fahrrad', 'Specialized', 'Allez', 2020, 18.00, FALSE),
('Kanu', 'Wassersport', 'Gumotex', 'Solar', 2019, 20.00, TRUE),
('SUP Board', 'Wassersport', 'Fanatic', 'Fly Air', 2023, 12.50, TRUE);

- Was macht den Code in der `create-inserts.js` Datei?

  - jede zeile fügt die werte der genannten objekte ein

### Erstelle eine neue SQL Datei namens `select-products.sql` in dem Ordner `sql-products`

- In dieser Datei, schreibe die SQL Befehle um die folgenden Informationen aus der `products` Tabelle zu selektieren:

```sql
SELECT name, type, price_per_day FROM products WHERE available = TRUE;
```

- führe die Datei `select-products.sql` in deiner `test` Datenbank aus wie z.B. mit dem Befehl:

```bash
psql -U postgres -h localhost -d test -f select-products.sql
```

- Was siehst du als Ergebnis?

  ost -d test -f select-products.sql
  Password for user postgres: 
   name | type | price_per_day 
  ------+------+---------------
  (0 rows)

- kommentiere die erstere Zeile in der `select-products.sql` Datei aus und füge den folgenden SQL Befehl hinzu:

```sql
SELECT type, COUNT(*) FROM products GROUP BY type;
```

- führe die Datei `select-products.sql` in deiner `test` Datenbank aus wie z.B. mit dem Befehl:

```bash
psql -U postgres -h localhost -d test -f select-products.sql
```

- Was siehst du als Ergebnis?

  - (5 rows)

    ...skipping...
    id |     name      |    type     |    brand    |  model  | year | price_per_day | available 
    ----+---------------+-------------+-------------+---------+------+---------------+-----------
    1 | Mountain Bike | Fahrrad     | Cube        | Aim Pro | 2022 |         15.00 | t
    2 | E-Bike        | Fahrrad     | Haibike     | Sduro   | 2021 |         25.00 | t
    3 | Road Bike     | Fahrrad     | Specialized | Allez   | 2020 |         18.00 | f
    4 | Kanu          | Wassersport | Gumotex     | Solar   | 2019 |         20.00 | t
    5 | SUP Board     | Wassersport | Fanatic     | Fly Air | 2023 |         12.50 | t
    (5 rows)

    ~
    (END)

## Recherchiere folgende SQL Befehle

- `WHERE`
  - Filtert Datensätze Bsp.: 

      SELECT * FROM products WHERE avaiable = TRUE;

  - werden immer nur für bestimmte Zeilen einer Tabelle verwendet.

- `GROUP BY`

  - Fässt Zeilen mit gleichen Werten in bestimmten Spalten zu Gruppen zusammen

      SELECT type, COUNT(*) FROM products GROUP BY type;

  - bei Berechnung agregierter Werte pro Gruppe (Summen, Durchschnitte, Anzahl)

- `COUNT()`

  - gibt die Anzahl der Zeilen/Werte an

    - SELECT COUNT(*) FROM products WHERE available = TRUE;


  - Erkenntnis über Anzahl der Datensätze

- Was machen diese Befehle?
- Wann werden sie verwendet?

## Bonus

- Versuch die CRUD Operationen (Create, Read, Update, Delete) mit SQL Befehlen zu machen
